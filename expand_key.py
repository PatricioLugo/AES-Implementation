def main():
    example_cipher_key = [
        [0x2b, 0x28, 0xab, 0x09],
        [0x7e, 0xae, 0xf7, 0xcf],
        [0x15, 0xd2, 0x15, 0x4f],
        [0x16, 0xa6, 0x88, 0x3c]
    ]

    key = [format(x, '02x') for x in matrix_to_list(example_cipher_key)]
    expanded_key_example = expand_key(key)
    round_keys = words_to_roundkeys(expanded_key_example)

    for i, rk in enumerate(round_keys):
        print(f"Round {i} Key:")
        for row in rk:
            print(row)
        print()

expkey_sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

rcon = [
    0x00000000, 0x01000000, 0x02000000,
    0x04000000, 0x08000000, 0x10000000,
    0x20000000, 0x40000000, 0x80000000,
    0x1b000000, 0x36000000
]

def expand_key(key):
    expanded_key = [()] * 44
    for i in range(4):
        expanded_key[i] = (key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3])

    for i in range(4, 44):
        temp = expanded_key[i - 1]
        word = expanded_key[i - 4]

        if i % 4 == 0:
            temp = rot_word(temp)
            temp = sub_word(temp)
            rcon_val = rcon[i // 4]
            temp = hex_xor(temp, format(rcon_val, '08x'))

        word_str = ''.join(word)
        temp_str = ''.join(temp)
        xord = hex_xor(word_str, temp_str)
        expanded_key[i] = (xord[:2], xord[2:4], xord[4:6], xord[6:8])

    return expanded_key

def rot_word(word):
    a, b, c, d = word
    return (b, c, d, a)

def sub_word(word):
    s_word = ()
    for byte in word:
        index = int(byte, 16)
        sp_value = format(expkey_sbox[index], '02x')
        s_word += (sp_value,)
    return s_word

def hex_xor(a_hex, b_hex):
    if isinstance(a_hex, tuple):
        a_hex = ''.join(a_hex)
    if isinstance(b_hex, tuple):
        b_hex = ''.join(b_hex)
    a_bin = int(a_hex, 16)
    b_bin = int(b_hex, 16)
    xor = a_bin ^ b_bin
    return format(xor, '08x')

def hex_to_binary(hex_str):
    return bin(int(hex_str, 16))[2:].zfill(32)

def matrix_to_list(matrix):
    result = []
    for col in range(4):
        for row in range(4):
            result.append(matrix[row][col])
    return result

def words_to_roundkeys(w):
    round_keys = []
    for i in range(0, 44, 4):
        matrix = []
        for row in range(4):
            matrix_row = []
            for col in range(4):
                matrix_row.append(w[i + col][row])
            matrix.append(matrix_row)
        round_keys.append(matrix)
    return round_keys

if __name__ == "__main__":
    main()